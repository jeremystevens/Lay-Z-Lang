Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ECHO
    NOT
    OR
    PRINT

Grammar

Rule 0     S' -> statement
Rule 1     statement -> stmt_list
Rule 2     stmt_list -> simple_stmt
Rule 3     stmt_list -> stmt_list NEWLINE simple_stmt
Rule 4     if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
Rule 5     if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
Rule 6     if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
Rule 7     while_stmt -> WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
Rule 8     for_stmt -> FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
Rule 9     simple_stmt -> expression
Rule 10    simple_stmt -> expr_list
Rule 11    simple_stmt -> arg_list
Rule 12    simple_stmt -> assignment_stmt
Rule 13    simple_stmt -> array_decl_stmt
Rule 14    simple_stmt -> if_stmt
Rule 15    simple_stmt -> while_stmt
Rule 16    simple_stmt -> for_stmt
Rule 17    simple_stmt -> output_stmt
Rule 18    simple_stmt -> input_stmt
Rule 19    simple_stmt -> function_stmt
Rule 20    simple_stmt -> return_stmt
Rule 21    array_decl_stmt -> DOUBLE array_index
Rule 22    array_decl_stmt -> INT array_index
Rule 23    assignment_stmt -> VAR EQUALS expression
Rule 24    assignment_stmt -> array_index EQUALS expression
Rule 25    input_stmt -> INPUT VAR
Rule 26    input_stmt -> INPUT array_index
Rule 27    output_stmt -> OUTPUT expression
Rule 28    return_stmt -> RETURN expression
Rule 29    function_header -> INT SUBROUTINE VAR LPAREN arg_list RPAREN
Rule 30    function_header -> DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
Rule 31    function_header -> INT SUBROUTINE VAR LPAREN RPAREN
Rule 32    function_header -> DOUBLE SUBROUTINE VAR LPAREN RPAREN
Rule 33    function_stmt -> function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
Rule 34    arg_list -> INT VAR
Rule 35    arg_list -> DOUBLE VAR
Rule 36    arg_list -> arg_list COMMA INT VAR
Rule 37    arg_list -> arg_list COMMA DOUBLE VAR
Rule 38    expr_list -> expression COMMA expression
Rule 39    expr_list -> expr_list COMMA expression
Rule 40    expression -> expression PLUS expression
Rule 41    expression -> expression MINUS expression
Rule 42    expression -> expression TIMES expression
Rule 43    expression -> expression DIVIDE expression
Rule 44    expression -> expression PERCENT expression
Rule 45    expression -> expression FLOORDIV expression
Rule 46    expression -> expression MOD expression
Rule 47    expression -> expression LESS_THAN expression
Rule 48    expression -> expression GREATER_THAN expression
Rule 49    expression -> expression LESS_EQUAL expression
Rule 50    expression -> expression GREATER_EQUAL expression
Rule 51    expression -> expression EQUALITY expression
Rule 52    expression -> expression NOT_EQUALITY expression
Rule 53    expression -> MINUS expression
Rule 54    expression -> LPAREN expression RPAREN
Rule 55    expression -> VAR LPAREN expression RPAREN
Rule 56    expression -> VAR LPAREN expr_list RPAREN
Rule 57    expression -> VAR LPAREN RPAREN
Rule 58    expression -> array_index
Rule 59    array_index -> VAR LBRACKET expression RBRACKET
Rule 60    expression -> literal
Rule 61    literal -> INT_CONST
Rule 62    literal -> DOUBLE_CONST
Rule 63    literal -> STRING_CONST
Rule 64    expression -> VAR

Terminals, with rules where they appear

AND                  : 
COMMA                : 36 37 38 39
DIVIDE               : 43
DO                   : 7
DOUBLE               : 21 30 32 35 37
DOUBLE_CONST         : 62
ECHO                 : 
ELSE                 : 5 6
ENDIF                : 4 5
ENDSUBROUTINE        : 33
ENDWHILE             : 7
EQUALITY             : 51
EQUALS               : 23 24
FLOORDIV             : 45
FOR                  : 8
GREATER_EQUAL        : 50
GREATER_THAN         : 48
IF                   : 4 5 6
INPUT                : 25 26
INT                  : 22 29 31 34 36
INT_CONST            : 61
LBRACKET             : 59
LESS_EQUAL           : 49
LESS_THAN            : 47
LPAREN               : 29 30 31 32 54 55 56 57
MINUS                : 41 53
MOD                  : 46
NEWLINE              : 3 4 4 5 5 5 5 6 6 7 7 8 8 33 33
NEXT                 : 8
NOT                  : 
NOT_EQUALITY         : 52
OR                   : 
OUTPUT               : 27
PERCENT              : 44
PLUS                 : 40
PRINT                : 
RBRACKET             : 59
RETURN               : 28
RPAREN               : 29 30 31 32 54 55 56 57
STRING_CONST         : 63
SUBROUTINE           : 29 30 31 32
THEN                 : 4 5 6
TIMES                : 42
TO                   : 8
VAR                  : 8 23 25 29 30 31 32 34 35 36 37 55 56 57 59 64
WHILE                : 7
error                : 

Nonterminals, with rules where they appear

arg_list             : 11 29 30 36 37
array_decl_stmt      : 13
array_index          : 21 22 24 26 58
assignment_stmt      : 8 12
expr_list            : 10 39 56
expression           : 4 5 6 7 8 9 23 24 27 28 38 38 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 54 55 59
for_stmt             : 16
function_header      : 33
function_stmt        : 19
if_stmt              : 6 14
input_stmt           : 18
literal              : 60
output_stmt          : 17
return_stmt          : 20
simple_stmt          : 2 3
statement            : 0
stmt_list            : 1 3 4 5 5 6 7 8 33
while_stmt           : 15

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . stmt_list
    (2) stmt_list -> . simple_stmt
    (3) stmt_list -> . stmt_list NEWLINE simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    statement                      shift and go to state 1
    stmt_list                      shift and go to state 2
    simple_stmt                    shift and go to state 3
    expression                     shift and go to state 4
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 1

    (0) S' -> statement .



state 2

    (1) statement -> stmt_list .
    (3) stmt_list -> stmt_list . NEWLINE simple_stmt

    $end            reduce using rule 1 (statement -> stmt_list .)
    NEWLINE         shift and go to state 33


state 3

    (2) stmt_list -> simple_stmt .

    NEWLINE         reduce using rule 2 (stmt_list -> simple_stmt .)
    $end            reduce using rule 2 (stmt_list -> simple_stmt .)


state 4

    (9) simple_stmt -> expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression
    (38) expr_list -> expression . COMMA expression

    NEWLINE         reduce using rule 9 (simple_stmt -> expression .)
    $end            reduce using rule 9 (simple_stmt -> expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46
    COMMA           shift and go to state 47


state 5

    (10) simple_stmt -> expr_list .
    (39) expr_list -> expr_list . COMMA expression

    NEWLINE         reduce using rule 10 (simple_stmt -> expr_list .)
    $end            reduce using rule 10 (simple_stmt -> expr_list .)
    COMMA           shift and go to state 48


state 6

    (11) simple_stmt -> arg_list .
    (36) arg_list -> arg_list . COMMA INT VAR
    (37) arg_list -> arg_list . COMMA DOUBLE VAR

    NEWLINE         reduce using rule 11 (simple_stmt -> arg_list .)
    $end            reduce using rule 11 (simple_stmt -> arg_list .)
    COMMA           shift and go to state 49


state 7

    (12) simple_stmt -> assignment_stmt .

    NEWLINE         reduce using rule 12 (simple_stmt -> assignment_stmt .)
    $end            reduce using rule 12 (simple_stmt -> assignment_stmt .)


state 8

    (13) simple_stmt -> array_decl_stmt .

    NEWLINE         reduce using rule 13 (simple_stmt -> array_decl_stmt .)
    $end            reduce using rule 13 (simple_stmt -> array_decl_stmt .)


state 9

    (14) simple_stmt -> if_stmt .

    NEWLINE         reduce using rule 14 (simple_stmt -> if_stmt .)
    $end            reduce using rule 14 (simple_stmt -> if_stmt .)


state 10

    (15) simple_stmt -> while_stmt .

    NEWLINE         reduce using rule 15 (simple_stmt -> while_stmt .)
    $end            reduce using rule 15 (simple_stmt -> while_stmt .)


state 11

    (16) simple_stmt -> for_stmt .

    NEWLINE         reduce using rule 16 (simple_stmt -> for_stmt .)
    $end            reduce using rule 16 (simple_stmt -> for_stmt .)


state 12

    (17) simple_stmt -> output_stmt .

    NEWLINE         reduce using rule 17 (simple_stmt -> output_stmt .)
    $end            reduce using rule 17 (simple_stmt -> output_stmt .)


state 13

    (18) simple_stmt -> input_stmt .

    NEWLINE         reduce using rule 18 (simple_stmt -> input_stmt .)
    $end            reduce using rule 18 (simple_stmt -> input_stmt .)


state 14

    (19) simple_stmt -> function_stmt .

    NEWLINE         reduce using rule 19 (simple_stmt -> function_stmt .)
    $end            reduce using rule 19 (simple_stmt -> function_stmt .)


state 15

    (20) simple_stmt -> return_stmt .

    NEWLINE         reduce using rule 20 (simple_stmt -> return_stmt .)
    $end            reduce using rule 20 (simple_stmt -> return_stmt .)


state 16

    (53) expression -> MINUS . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 50
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 17

    (54) expression -> LPAREN . expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 53
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 18

    (55) expression -> VAR . LPAREN expression RPAREN
    (56) expression -> VAR . LPAREN expr_list RPAREN
    (57) expression -> VAR . LPAREN RPAREN
    (64) expression -> VAR .
    (23) assignment_stmt -> VAR . EQUALS expression
    (59) array_index -> VAR . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 54
    PLUS            reduce using rule 64 (expression -> VAR .)
    MINUS           reduce using rule 64 (expression -> VAR .)
    TIMES           reduce using rule 64 (expression -> VAR .)
    DIVIDE          reduce using rule 64 (expression -> VAR .)
    PERCENT         reduce using rule 64 (expression -> VAR .)
    FLOORDIV        reduce using rule 64 (expression -> VAR .)
    MOD             reduce using rule 64 (expression -> VAR .)
    LESS_THAN       reduce using rule 64 (expression -> VAR .)
    GREATER_THAN    reduce using rule 64 (expression -> VAR .)
    LESS_EQUAL      reduce using rule 64 (expression -> VAR .)
    GREATER_EQUAL   reduce using rule 64 (expression -> VAR .)
    EQUALITY        reduce using rule 64 (expression -> VAR .)
    NOT_EQUALITY    reduce using rule 64 (expression -> VAR .)
    COMMA           reduce using rule 64 (expression -> VAR .)
    NEWLINE         reduce using rule 64 (expression -> VAR .)
    $end            reduce using rule 64 (expression -> VAR .)
    EQUALS          shift and go to state 55
    LBRACKET        shift and go to state 56


state 19

    (58) expression -> array_index .
    (24) assignment_stmt -> array_index . EQUALS expression

    PLUS            reduce using rule 58 (expression -> array_index .)
    MINUS           reduce using rule 58 (expression -> array_index .)
    TIMES           reduce using rule 58 (expression -> array_index .)
    DIVIDE          reduce using rule 58 (expression -> array_index .)
    PERCENT         reduce using rule 58 (expression -> array_index .)
    FLOORDIV        reduce using rule 58 (expression -> array_index .)
    MOD             reduce using rule 58 (expression -> array_index .)
    LESS_THAN       reduce using rule 58 (expression -> array_index .)
    GREATER_THAN    reduce using rule 58 (expression -> array_index .)
    LESS_EQUAL      reduce using rule 58 (expression -> array_index .)
    GREATER_EQUAL   reduce using rule 58 (expression -> array_index .)
    EQUALITY        reduce using rule 58 (expression -> array_index .)
    NOT_EQUALITY    reduce using rule 58 (expression -> array_index .)
    COMMA           reduce using rule 58 (expression -> array_index .)
    NEWLINE         reduce using rule 58 (expression -> array_index .)
    $end            reduce using rule 58 (expression -> array_index .)
    EQUALS          shift and go to state 57


state 20

    (60) expression -> literal .

    PLUS            reduce using rule 60 (expression -> literal .)
    MINUS           reduce using rule 60 (expression -> literal .)
    TIMES           reduce using rule 60 (expression -> literal .)
    DIVIDE          reduce using rule 60 (expression -> literal .)
    PERCENT         reduce using rule 60 (expression -> literal .)
    FLOORDIV        reduce using rule 60 (expression -> literal .)
    MOD             reduce using rule 60 (expression -> literal .)
    LESS_THAN       reduce using rule 60 (expression -> literal .)
    GREATER_THAN    reduce using rule 60 (expression -> literal .)
    LESS_EQUAL      reduce using rule 60 (expression -> literal .)
    GREATER_EQUAL   reduce using rule 60 (expression -> literal .)
    EQUALITY        reduce using rule 60 (expression -> literal .)
    NOT_EQUALITY    reduce using rule 60 (expression -> literal .)
    COMMA           reduce using rule 60 (expression -> literal .)
    NEWLINE         reduce using rule 60 (expression -> literal .)
    $end            reduce using rule 60 (expression -> literal .)
    RPAREN          reduce using rule 60 (expression -> literal .)
    THEN            reduce using rule 60 (expression -> literal .)
    DO              reduce using rule 60 (expression -> literal .)
    TO              reduce using rule 60 (expression -> literal .)
    RBRACKET        reduce using rule 60 (expression -> literal .)


state 21

    (34) arg_list -> INT . VAR
    (22) array_decl_stmt -> INT . array_index
    (29) function_header -> INT . SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> INT . SUBROUTINE VAR LPAREN RPAREN
    (59) array_index -> . VAR LBRACKET expression RBRACKET

    VAR             shift and go to state 58
    SUBROUTINE      shift and go to state 60

    array_index                    shift and go to state 59

state 22

    (35) arg_list -> DOUBLE . VAR
    (21) array_decl_stmt -> DOUBLE . array_index
    (30) function_header -> DOUBLE . SUBROUTINE VAR LPAREN arg_list RPAREN
    (32) function_header -> DOUBLE . SUBROUTINE VAR LPAREN RPAREN
    (59) array_index -> . VAR LBRACKET expression RBRACKET

    VAR             shift and go to state 61
    SUBROUTINE      shift and go to state 63

    array_index                    shift and go to state 62

state 23

    (4) if_stmt -> IF . expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> IF . expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> IF . expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 64
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 24

    (7) while_stmt -> WHILE . expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 65
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 25

    (8) for_stmt -> FOR . assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET

    VAR             shift and go to state 67

    assignment_stmt                shift and go to state 66
    array_index                    shift and go to state 68

state 26

    (27) output_stmt -> OUTPUT . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 69
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 27

    (25) input_stmt -> INPUT . VAR
    (26) input_stmt -> INPUT . array_index
    (59) array_index -> . VAR LBRACKET expression RBRACKET

    VAR             shift and go to state 70

    array_index                    shift and go to state 71

state 28

    (33) function_stmt -> function_header . NEWLINE stmt_list NEWLINE ENDSUBROUTINE

    NEWLINE         shift and go to state 72


state 29

    (28) return_stmt -> RETURN . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 73
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 30

    (61) literal -> INT_CONST .

    PLUS            reduce using rule 61 (literal -> INT_CONST .)
    MINUS           reduce using rule 61 (literal -> INT_CONST .)
    TIMES           reduce using rule 61 (literal -> INT_CONST .)
    DIVIDE          reduce using rule 61 (literal -> INT_CONST .)
    PERCENT         reduce using rule 61 (literal -> INT_CONST .)
    FLOORDIV        reduce using rule 61 (literal -> INT_CONST .)
    MOD             reduce using rule 61 (literal -> INT_CONST .)
    LESS_THAN       reduce using rule 61 (literal -> INT_CONST .)
    GREATER_THAN    reduce using rule 61 (literal -> INT_CONST .)
    LESS_EQUAL      reduce using rule 61 (literal -> INT_CONST .)
    GREATER_EQUAL   reduce using rule 61 (literal -> INT_CONST .)
    EQUALITY        reduce using rule 61 (literal -> INT_CONST .)
    NOT_EQUALITY    reduce using rule 61 (literal -> INT_CONST .)
    COMMA           reduce using rule 61 (literal -> INT_CONST .)
    NEWLINE         reduce using rule 61 (literal -> INT_CONST .)
    $end            reduce using rule 61 (literal -> INT_CONST .)
    RPAREN          reduce using rule 61 (literal -> INT_CONST .)
    THEN            reduce using rule 61 (literal -> INT_CONST .)
    DO              reduce using rule 61 (literal -> INT_CONST .)
    TO              reduce using rule 61 (literal -> INT_CONST .)
    RBRACKET        reduce using rule 61 (literal -> INT_CONST .)


state 31

    (62) literal -> DOUBLE_CONST .

    PLUS            reduce using rule 62 (literal -> DOUBLE_CONST .)
    MINUS           reduce using rule 62 (literal -> DOUBLE_CONST .)
    TIMES           reduce using rule 62 (literal -> DOUBLE_CONST .)
    DIVIDE          reduce using rule 62 (literal -> DOUBLE_CONST .)
    PERCENT         reduce using rule 62 (literal -> DOUBLE_CONST .)
    FLOORDIV        reduce using rule 62 (literal -> DOUBLE_CONST .)
    MOD             reduce using rule 62 (literal -> DOUBLE_CONST .)
    LESS_THAN       reduce using rule 62 (literal -> DOUBLE_CONST .)
    GREATER_THAN    reduce using rule 62 (literal -> DOUBLE_CONST .)
    LESS_EQUAL      reduce using rule 62 (literal -> DOUBLE_CONST .)
    GREATER_EQUAL   reduce using rule 62 (literal -> DOUBLE_CONST .)
    EQUALITY        reduce using rule 62 (literal -> DOUBLE_CONST .)
    NOT_EQUALITY    reduce using rule 62 (literal -> DOUBLE_CONST .)
    COMMA           reduce using rule 62 (literal -> DOUBLE_CONST .)
    NEWLINE         reduce using rule 62 (literal -> DOUBLE_CONST .)
    $end            reduce using rule 62 (literal -> DOUBLE_CONST .)
    RPAREN          reduce using rule 62 (literal -> DOUBLE_CONST .)
    THEN            reduce using rule 62 (literal -> DOUBLE_CONST .)
    DO              reduce using rule 62 (literal -> DOUBLE_CONST .)
    TO              reduce using rule 62 (literal -> DOUBLE_CONST .)
    RBRACKET        reduce using rule 62 (literal -> DOUBLE_CONST .)


state 32

    (63) literal -> STRING_CONST .

    PLUS            reduce using rule 63 (literal -> STRING_CONST .)
    MINUS           reduce using rule 63 (literal -> STRING_CONST .)
    TIMES           reduce using rule 63 (literal -> STRING_CONST .)
    DIVIDE          reduce using rule 63 (literal -> STRING_CONST .)
    PERCENT         reduce using rule 63 (literal -> STRING_CONST .)
    FLOORDIV        reduce using rule 63 (literal -> STRING_CONST .)
    MOD             reduce using rule 63 (literal -> STRING_CONST .)
    LESS_THAN       reduce using rule 63 (literal -> STRING_CONST .)
    GREATER_THAN    reduce using rule 63 (literal -> STRING_CONST .)
    LESS_EQUAL      reduce using rule 63 (literal -> STRING_CONST .)
    GREATER_EQUAL   reduce using rule 63 (literal -> STRING_CONST .)
    EQUALITY        reduce using rule 63 (literal -> STRING_CONST .)
    NOT_EQUALITY    reduce using rule 63 (literal -> STRING_CONST .)
    COMMA           reduce using rule 63 (literal -> STRING_CONST .)
    NEWLINE         reduce using rule 63 (literal -> STRING_CONST .)
    $end            reduce using rule 63 (literal -> STRING_CONST .)
    RPAREN          reduce using rule 63 (literal -> STRING_CONST .)
    THEN            reduce using rule 63 (literal -> STRING_CONST .)
    DO              reduce using rule 63 (literal -> STRING_CONST .)
    TO              reduce using rule 63 (literal -> STRING_CONST .)
    RBRACKET        reduce using rule 63 (literal -> STRING_CONST .)


state 33

    (3) stmt_list -> stmt_list NEWLINE . simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    simple_stmt                    shift and go to state 74
    expression                     shift and go to state 4
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 34

    (40) expression -> expression PLUS . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 75
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 35

    (41) expression -> expression MINUS . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 76
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 36

    (42) expression -> expression TIMES . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 77
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 37

    (43) expression -> expression DIVIDE . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 78
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 38

    (44) expression -> expression PERCENT . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 79
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 39

    (45) expression -> expression FLOORDIV . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 80
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 40

    (46) expression -> expression MOD . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 81
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 41

    (47) expression -> expression LESS_THAN . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 82
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 42

    (48) expression -> expression GREATER_THAN . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 83
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 43

    (49) expression -> expression LESS_EQUAL . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 84
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 44

    (50) expression -> expression GREATER_EQUAL . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 85
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 45

    (51) expression -> expression EQUALITY . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 86
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 46

    (52) expression -> expression NOT_EQUALITY . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 87
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 47

    (38) expr_list -> expression COMMA . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 88
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 48

    (39) expr_list -> expr_list COMMA . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 89
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 49

    (36) arg_list -> arg_list COMMA . INT VAR
    (37) arg_list -> arg_list COMMA . DOUBLE VAR

    INT             shift and go to state 90
    DOUBLE          shift and go to state 91


state 50

    (53) expression -> MINUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    PLUS            reduce using rule 53 (expression -> MINUS expression .)
    MINUS           reduce using rule 53 (expression -> MINUS expression .)
    TIMES           reduce using rule 53 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 53 (expression -> MINUS expression .)
    PERCENT         reduce using rule 53 (expression -> MINUS expression .)
    FLOORDIV        reduce using rule 53 (expression -> MINUS expression .)
    MOD             reduce using rule 53 (expression -> MINUS expression .)
    LESS_THAN       reduce using rule 53 (expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 53 (expression -> MINUS expression .)
    LESS_EQUAL      reduce using rule 53 (expression -> MINUS expression .)
    GREATER_EQUAL   reduce using rule 53 (expression -> MINUS expression .)
    EQUALITY        reduce using rule 53 (expression -> MINUS expression .)
    NOT_EQUALITY    reduce using rule 53 (expression -> MINUS expression .)
    COMMA           reduce using rule 53 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 53 (expression -> MINUS expression .)
    $end            reduce using rule 53 (expression -> MINUS expression .)
    RPAREN          reduce using rule 53 (expression -> MINUS expression .)
    THEN            reduce using rule 53 (expression -> MINUS expression .)
    DO              reduce using rule 53 (expression -> MINUS expression .)
    TO              reduce using rule 53 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 53 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! PERCENT         [ shift and go to state 38 ]
  ! FLOORDIV        [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! GREATER_EQUAL   [ shift and go to state 44 ]
  ! EQUALITY        [ shift and go to state 45 ]
  ! NOT_EQUALITY    [ shift and go to state 46 ]


state 51

    (55) expression -> VAR . LPAREN expression RPAREN
    (56) expression -> VAR . LPAREN expr_list RPAREN
    (57) expression -> VAR . LPAREN RPAREN
    (64) expression -> VAR .
    (59) array_index -> VAR . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 54
    PLUS            reduce using rule 64 (expression -> VAR .)
    MINUS           reduce using rule 64 (expression -> VAR .)
    TIMES           reduce using rule 64 (expression -> VAR .)
    DIVIDE          reduce using rule 64 (expression -> VAR .)
    PERCENT         reduce using rule 64 (expression -> VAR .)
    FLOORDIV        reduce using rule 64 (expression -> VAR .)
    MOD             reduce using rule 64 (expression -> VAR .)
    LESS_THAN       reduce using rule 64 (expression -> VAR .)
    GREATER_THAN    reduce using rule 64 (expression -> VAR .)
    LESS_EQUAL      reduce using rule 64 (expression -> VAR .)
    GREATER_EQUAL   reduce using rule 64 (expression -> VAR .)
    EQUALITY        reduce using rule 64 (expression -> VAR .)
    NOT_EQUALITY    reduce using rule 64 (expression -> VAR .)
    COMMA           reduce using rule 64 (expression -> VAR .)
    NEWLINE         reduce using rule 64 (expression -> VAR .)
    $end            reduce using rule 64 (expression -> VAR .)
    RPAREN          reduce using rule 64 (expression -> VAR .)
    THEN            reduce using rule 64 (expression -> VAR .)
    DO              reduce using rule 64 (expression -> VAR .)
    TO              reduce using rule 64 (expression -> VAR .)
    RBRACKET        reduce using rule 64 (expression -> VAR .)
    LBRACKET        shift and go to state 56


state 52

    (58) expression -> array_index .

    PLUS            reduce using rule 58 (expression -> array_index .)
    MINUS           reduce using rule 58 (expression -> array_index .)
    TIMES           reduce using rule 58 (expression -> array_index .)
    DIVIDE          reduce using rule 58 (expression -> array_index .)
    PERCENT         reduce using rule 58 (expression -> array_index .)
    FLOORDIV        reduce using rule 58 (expression -> array_index .)
    MOD             reduce using rule 58 (expression -> array_index .)
    LESS_THAN       reduce using rule 58 (expression -> array_index .)
    GREATER_THAN    reduce using rule 58 (expression -> array_index .)
    LESS_EQUAL      reduce using rule 58 (expression -> array_index .)
    GREATER_EQUAL   reduce using rule 58 (expression -> array_index .)
    EQUALITY        reduce using rule 58 (expression -> array_index .)
    NOT_EQUALITY    reduce using rule 58 (expression -> array_index .)
    COMMA           reduce using rule 58 (expression -> array_index .)
    NEWLINE         reduce using rule 58 (expression -> array_index .)
    $end            reduce using rule 58 (expression -> array_index .)
    RPAREN          reduce using rule 58 (expression -> array_index .)
    THEN            reduce using rule 58 (expression -> array_index .)
    DO              reduce using rule 58 (expression -> array_index .)
    TO              reduce using rule 58 (expression -> array_index .)
    RBRACKET        reduce using rule 58 (expression -> array_index .)


state 53

    (54) expression -> LPAREN expression . RPAREN
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    RPAREN          shift and go to state 92
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 54

    (55) expression -> VAR LPAREN . expression RPAREN
    (56) expression -> VAR LPAREN . expr_list RPAREN
    (57) expression -> VAR LPAREN . RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    RPAREN          shift and go to state 94
    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 93
    expr_list                      shift and go to state 95
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 55

    (23) assignment_stmt -> VAR EQUALS . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 96
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 56

    (59) array_index -> VAR LBRACKET . expression RBRACKET
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 97
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 57

    (24) assignment_stmt -> array_index EQUALS . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    array_index                    shift and go to state 52
    expression                     shift and go to state 98
    literal                        shift and go to state 20

state 58

    (34) arg_list -> INT VAR .
    (59) array_index -> VAR . LBRACKET expression RBRACKET

    COMMA           reduce using rule 34 (arg_list -> INT VAR .)
    NEWLINE         reduce using rule 34 (arg_list -> INT VAR .)
    $end            reduce using rule 34 (arg_list -> INT VAR .)
    LBRACKET        shift and go to state 56


state 59

    (22) array_decl_stmt -> INT array_index .

    NEWLINE         reduce using rule 22 (array_decl_stmt -> INT array_index .)
    $end            reduce using rule 22 (array_decl_stmt -> INT array_index .)


state 60

    (29) function_header -> INT SUBROUTINE . VAR LPAREN arg_list RPAREN
    (31) function_header -> INT SUBROUTINE . VAR LPAREN RPAREN

    VAR             shift and go to state 99


state 61

    (35) arg_list -> DOUBLE VAR .
    (59) array_index -> VAR . LBRACKET expression RBRACKET

    COMMA           reduce using rule 35 (arg_list -> DOUBLE VAR .)
    NEWLINE         reduce using rule 35 (arg_list -> DOUBLE VAR .)
    $end            reduce using rule 35 (arg_list -> DOUBLE VAR .)
    LBRACKET        shift and go to state 56


state 62

    (21) array_decl_stmt -> DOUBLE array_index .

    NEWLINE         reduce using rule 21 (array_decl_stmt -> DOUBLE array_index .)
    $end            reduce using rule 21 (array_decl_stmt -> DOUBLE array_index .)


state 63

    (30) function_header -> DOUBLE SUBROUTINE . VAR LPAREN arg_list RPAREN
    (32) function_header -> DOUBLE SUBROUTINE . VAR LPAREN RPAREN

    VAR             shift and go to state 100


state 64

    (4) if_stmt -> IF expression . THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> IF expression . THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> IF expression . THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    THEN            shift and go to state 101
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 65

    (7) while_stmt -> WHILE expression . DO NEWLINE stmt_list NEWLINE ENDWHILE
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    DO              shift and go to state 102
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 66

    (8) for_stmt -> FOR assignment_stmt . TO expression NEWLINE stmt_list NEWLINE NEXT VAR

    TO              shift and go to state 103


state 67

    (23) assignment_stmt -> VAR . EQUALS expression
    (59) array_index -> VAR . LBRACKET expression RBRACKET

    EQUALS          shift and go to state 55
    LBRACKET        shift and go to state 56


state 68

    (24) assignment_stmt -> array_index . EQUALS expression

    EQUALS          shift and go to state 57


state 69

    (27) output_stmt -> OUTPUT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    NEWLINE         reduce using rule 27 (output_stmt -> OUTPUT expression .)
    $end            reduce using rule 27 (output_stmt -> OUTPUT expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 70

    (25) input_stmt -> INPUT VAR .
    (59) array_index -> VAR . LBRACKET expression RBRACKET

    NEWLINE         reduce using rule 25 (input_stmt -> INPUT VAR .)
    $end            reduce using rule 25 (input_stmt -> INPUT VAR .)
    LBRACKET        shift and go to state 56


state 71

    (26) input_stmt -> INPUT array_index .

    NEWLINE         reduce using rule 26 (input_stmt -> INPUT array_index .)
    $end            reduce using rule 26 (input_stmt -> INPUT array_index .)


state 72

    (33) function_stmt -> function_header NEWLINE . stmt_list NEWLINE ENDSUBROUTINE
    (2) stmt_list -> . simple_stmt
    (3) stmt_list -> . stmt_list NEWLINE simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    function_header                shift and go to state 28
    stmt_list                      shift and go to state 104
    simple_stmt                    shift and go to state 3
    expression                     shift and go to state 4
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20

state 73

    (28) return_stmt -> RETURN expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    NEWLINE         reduce using rule 28 (return_stmt -> RETURN expression .)
    $end            reduce using rule 28 (return_stmt -> RETURN expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 74

    (3) stmt_list -> stmt_list NEWLINE simple_stmt .

    NEWLINE         reduce using rule 3 (stmt_list -> stmt_list NEWLINE simple_stmt .)
    $end            reduce using rule 3 (stmt_list -> stmt_list NEWLINE simple_stmt .)


state 75

    (40) expression -> expression PLUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    PLUS            reduce using rule 40 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 40 (expression -> expression PLUS expression .)
    FLOORDIV        reduce using rule 40 (expression -> expression PLUS expression .)
    MOD             reduce using rule 40 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 40 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 40 (expression -> expression PLUS expression .)
    LESS_EQUAL      reduce using rule 40 (expression -> expression PLUS expression .)
    GREATER_EQUAL   reduce using rule 40 (expression -> expression PLUS expression .)
    EQUALITY        reduce using rule 40 (expression -> expression PLUS expression .)
    NOT_EQUALITY    reduce using rule 40 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 40 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 40 (expression -> expression PLUS expression .)
    $end            reduce using rule 40 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 40 (expression -> expression PLUS expression .)
    THEN            reduce using rule 40 (expression -> expression PLUS expression .)
    DO              reduce using rule 40 (expression -> expression PLUS expression .)
    TO              reduce using rule 40 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 40 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38

  ! TIMES           [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! PERCENT         [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! FLOORDIV        [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! GREATER_EQUAL   [ shift and go to state 44 ]
  ! EQUALITY        [ shift and go to state 45 ]
  ! NOT_EQUALITY    [ shift and go to state 46 ]


state 76

    (41) expression -> expression MINUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    PLUS            reduce using rule 41 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 41 (expression -> expression MINUS expression .)
    FLOORDIV        reduce using rule 41 (expression -> expression MINUS expression .)
    MOD             reduce using rule 41 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 41 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 41 (expression -> expression MINUS expression .)
    LESS_EQUAL      reduce using rule 41 (expression -> expression MINUS expression .)
    GREATER_EQUAL   reduce using rule 41 (expression -> expression MINUS expression .)
    EQUALITY        reduce using rule 41 (expression -> expression MINUS expression .)
    NOT_EQUALITY    reduce using rule 41 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 41 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 41 (expression -> expression MINUS expression .)
    $end            reduce using rule 41 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 41 (expression -> expression MINUS expression .)
    THEN            reduce using rule 41 (expression -> expression MINUS expression .)
    DO              reduce using rule 41 (expression -> expression MINUS expression .)
    TO              reduce using rule 41 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 41 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38

  ! TIMES           [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! PERCENT         [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! FLOORDIV        [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! GREATER_EQUAL   [ shift and go to state 44 ]
  ! EQUALITY        [ shift and go to state 45 ]
  ! NOT_EQUALITY    [ shift and go to state 46 ]


state 77

    (42) expression -> expression TIMES expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    PLUS            reduce using rule 42 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 42 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 42 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 42 (expression -> expression TIMES expression .)
    PERCENT         reduce using rule 42 (expression -> expression TIMES expression .)
    FLOORDIV        reduce using rule 42 (expression -> expression TIMES expression .)
    MOD             reduce using rule 42 (expression -> expression TIMES expression .)
    LESS_THAN       reduce using rule 42 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 42 (expression -> expression TIMES expression .)
    LESS_EQUAL      reduce using rule 42 (expression -> expression TIMES expression .)
    GREATER_EQUAL   reduce using rule 42 (expression -> expression TIMES expression .)
    EQUALITY        reduce using rule 42 (expression -> expression TIMES expression .)
    NOT_EQUALITY    reduce using rule 42 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 42 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 42 (expression -> expression TIMES expression .)
    $end            reduce using rule 42 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 42 (expression -> expression TIMES expression .)
    THEN            reduce using rule 42 (expression -> expression TIMES expression .)
    DO              reduce using rule 42 (expression -> expression TIMES expression .)
    TO              reduce using rule 42 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 42 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! PERCENT         [ shift and go to state 38 ]
  ! FLOORDIV        [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! GREATER_EQUAL   [ shift and go to state 44 ]
  ! EQUALITY        [ shift and go to state 45 ]
  ! NOT_EQUALITY    [ shift and go to state 46 ]


state 78

    (43) expression -> expression DIVIDE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    PLUS            reduce using rule 43 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 43 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 43 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 43 (expression -> expression DIVIDE expression .)
    PERCENT         reduce using rule 43 (expression -> expression DIVIDE expression .)
    FLOORDIV        reduce using rule 43 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 43 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 43 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 43 (expression -> expression DIVIDE expression .)
    LESS_EQUAL      reduce using rule 43 (expression -> expression DIVIDE expression .)
    GREATER_EQUAL   reduce using rule 43 (expression -> expression DIVIDE expression .)
    EQUALITY        reduce using rule 43 (expression -> expression DIVIDE expression .)
    NOT_EQUALITY    reduce using rule 43 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 43 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 43 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 43 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 43 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 43 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 43 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 43 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 43 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! PERCENT         [ shift and go to state 38 ]
  ! FLOORDIV        [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! GREATER_EQUAL   [ shift and go to state 44 ]
  ! EQUALITY        [ shift and go to state 45 ]
  ! NOT_EQUALITY    [ shift and go to state 46 ]


state 79

    (44) expression -> expression PERCENT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    PLUS            reduce using rule 44 (expression -> expression PERCENT expression .)
    MINUS           reduce using rule 44 (expression -> expression PERCENT expression .)
    TIMES           reduce using rule 44 (expression -> expression PERCENT expression .)
    DIVIDE          reduce using rule 44 (expression -> expression PERCENT expression .)
    PERCENT         reduce using rule 44 (expression -> expression PERCENT expression .)
    FLOORDIV        reduce using rule 44 (expression -> expression PERCENT expression .)
    MOD             reduce using rule 44 (expression -> expression PERCENT expression .)
    LESS_THAN       reduce using rule 44 (expression -> expression PERCENT expression .)
    GREATER_THAN    reduce using rule 44 (expression -> expression PERCENT expression .)
    LESS_EQUAL      reduce using rule 44 (expression -> expression PERCENT expression .)
    GREATER_EQUAL   reduce using rule 44 (expression -> expression PERCENT expression .)
    EQUALITY        reduce using rule 44 (expression -> expression PERCENT expression .)
    NOT_EQUALITY    reduce using rule 44 (expression -> expression PERCENT expression .)
    COMMA           reduce using rule 44 (expression -> expression PERCENT expression .)
    NEWLINE         reduce using rule 44 (expression -> expression PERCENT expression .)
    $end            reduce using rule 44 (expression -> expression PERCENT expression .)
    RPAREN          reduce using rule 44 (expression -> expression PERCENT expression .)
    THEN            reduce using rule 44 (expression -> expression PERCENT expression .)
    DO              reduce using rule 44 (expression -> expression PERCENT expression .)
    TO              reduce using rule 44 (expression -> expression PERCENT expression .)
    RBRACKET        reduce using rule 44 (expression -> expression PERCENT expression .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! PERCENT         [ shift and go to state 38 ]
  ! FLOORDIV        [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_EQUAL      [ shift and go to state 43 ]
  ! GREATER_EQUAL   [ shift and go to state 44 ]
  ! EQUALITY        [ shift and go to state 45 ]
  ! NOT_EQUALITY    [ shift and go to state 46 ]


state 80

    (45) expression -> expression FLOORDIV expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for NOT_EQUALITY resolved as shift
    COMMA           reduce using rule 45 (expression -> expression FLOORDIV expression .)
    NEWLINE         reduce using rule 45 (expression -> expression FLOORDIV expression .)
    $end            reduce using rule 45 (expression -> expression FLOORDIV expression .)
    RPAREN          reduce using rule 45 (expression -> expression FLOORDIV expression .)
    THEN            reduce using rule 45 (expression -> expression FLOORDIV expression .)
    DO              reduce using rule 45 (expression -> expression FLOORDIV expression .)
    TO              reduce using rule 45 (expression -> expression FLOORDIV expression .)
    RBRACKET        reduce using rule 45 (expression -> expression FLOORDIV expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46

  ! PLUS            [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! PERCENT         [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! FLOORDIV        [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! LESS_THAN       [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! GREATER_THAN    [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! LESS_EQUAL      [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! EQUALITY        [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]
  ! NOT_EQUALITY    [ reduce using rule 45 (expression -> expression FLOORDIV expression .) ]


state 81

    (46) expression -> expression MOD expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for NOT_EQUALITY resolved as shift
    COMMA           reduce using rule 46 (expression -> expression MOD expression .)
    NEWLINE         reduce using rule 46 (expression -> expression MOD expression .)
    $end            reduce using rule 46 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 46 (expression -> expression MOD expression .)
    THEN            reduce using rule 46 (expression -> expression MOD expression .)
    DO              reduce using rule 46 (expression -> expression MOD expression .)
    TO              reduce using rule 46 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 46 (expression -> expression MOD expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46

  ! PLUS            [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! PERCENT         [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! FLOORDIV        [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! LESS_THAN       [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! GREATER_THAN    [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! LESS_EQUAL      [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! EQUALITY        [ reduce using rule 46 (expression -> expression MOD expression .) ]
  ! NOT_EQUALITY    [ reduce using rule 46 (expression -> expression MOD expression .) ]


state 82

    (47) expression -> expression LESS_THAN expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for NOT_EQUALITY resolved as shift
    COMMA           reduce using rule 47 (expression -> expression LESS_THAN expression .)
    NEWLINE         reduce using rule 47 (expression -> expression LESS_THAN expression .)
    $end            reduce using rule 47 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 47 (expression -> expression LESS_THAN expression .)
    THEN            reduce using rule 47 (expression -> expression LESS_THAN expression .)
    DO              reduce using rule 47 (expression -> expression LESS_THAN expression .)
    TO              reduce using rule 47 (expression -> expression LESS_THAN expression .)
    RBRACKET        reduce using rule 47 (expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46

  ! PLUS            [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! PERCENT         [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! FLOORDIV        [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! MOD             [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! LESS_THAN       [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! GREATER_THAN    [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! LESS_EQUAL      [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! EQUALITY        [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! NOT_EQUALITY    [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]


state 83

    (48) expression -> expression GREATER_THAN expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for NOT_EQUALITY resolved as shift
    COMMA           reduce using rule 48 (expression -> expression GREATER_THAN expression .)
    NEWLINE         reduce using rule 48 (expression -> expression GREATER_THAN expression .)
    $end            reduce using rule 48 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 48 (expression -> expression GREATER_THAN expression .)
    THEN            reduce using rule 48 (expression -> expression GREATER_THAN expression .)
    DO              reduce using rule 48 (expression -> expression GREATER_THAN expression .)
    TO              reduce using rule 48 (expression -> expression GREATER_THAN expression .)
    RBRACKET        reduce using rule 48 (expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46

  ! PLUS            [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! TIMES           [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! PERCENT         [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! FLOORDIV        [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! MOD             [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! LESS_THAN       [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! GREATER_THAN    [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! LESS_EQUAL      [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! EQUALITY        [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]
  ! NOT_EQUALITY    [ reduce using rule 48 (expression -> expression GREATER_THAN expression .) ]


state 84

    (49) expression -> expression LESS_EQUAL expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for NOT_EQUALITY resolved as shift
    COMMA           reduce using rule 49 (expression -> expression LESS_EQUAL expression .)
    NEWLINE         reduce using rule 49 (expression -> expression LESS_EQUAL expression .)
    $end            reduce using rule 49 (expression -> expression LESS_EQUAL expression .)
    RPAREN          reduce using rule 49 (expression -> expression LESS_EQUAL expression .)
    THEN            reduce using rule 49 (expression -> expression LESS_EQUAL expression .)
    DO              reduce using rule 49 (expression -> expression LESS_EQUAL expression .)
    TO              reduce using rule 49 (expression -> expression LESS_EQUAL expression .)
    RBRACKET        reduce using rule 49 (expression -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46

  ! PLUS            [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! PERCENT         [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! FLOORDIV        [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! MOD             [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! EQUALITY        [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]
  ! NOT_EQUALITY    [ reduce using rule 49 (expression -> expression LESS_EQUAL expression .) ]


state 85

    (50) expression -> expression GREATER_EQUAL expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for NOT_EQUALITY resolved as shift
    COMMA           reduce using rule 50 (expression -> expression GREATER_EQUAL expression .)
    NEWLINE         reduce using rule 50 (expression -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 50 (expression -> expression GREATER_EQUAL expression .)
    RPAREN          reduce using rule 50 (expression -> expression GREATER_EQUAL expression .)
    THEN            reduce using rule 50 (expression -> expression GREATER_EQUAL expression .)
    DO              reduce using rule 50 (expression -> expression GREATER_EQUAL expression .)
    TO              reduce using rule 50 (expression -> expression GREATER_EQUAL expression .)
    RBRACKET        reduce using rule 50 (expression -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46

  ! PLUS            [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! PERCENT         [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! FLOORDIV        [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! EQUALITY        [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]
  ! NOT_EQUALITY    [ reduce using rule 50 (expression -> expression GREATER_EQUAL expression .) ]


state 86

    (51) expression -> expression EQUALITY expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for NOT_EQUALITY resolved as shift
    COMMA           reduce using rule 51 (expression -> expression EQUALITY expression .)
    NEWLINE         reduce using rule 51 (expression -> expression EQUALITY expression .)
    $end            reduce using rule 51 (expression -> expression EQUALITY expression .)
    RPAREN          reduce using rule 51 (expression -> expression EQUALITY expression .)
    THEN            reduce using rule 51 (expression -> expression EQUALITY expression .)
    DO              reduce using rule 51 (expression -> expression EQUALITY expression .)
    TO              reduce using rule 51 (expression -> expression EQUALITY expression .)
    RBRACKET        reduce using rule 51 (expression -> expression EQUALITY expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46

  ! PLUS            [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! PERCENT         [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! FLOORDIV        [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! LESS_THAN       [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! GREATER_THAN    [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! LESS_EQUAL      [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! EQUALITY        [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]
  ! NOT_EQUALITY    [ reduce using rule 51 (expression -> expression EQUALITY expression .) ]


state 87

    (52) expression -> expression NOT_EQUALITY expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for NOT_EQUALITY resolved as shift
    COMMA           reduce using rule 52 (expression -> expression NOT_EQUALITY expression .)
    NEWLINE         reduce using rule 52 (expression -> expression NOT_EQUALITY expression .)
    $end            reduce using rule 52 (expression -> expression NOT_EQUALITY expression .)
    RPAREN          reduce using rule 52 (expression -> expression NOT_EQUALITY expression .)
    THEN            reduce using rule 52 (expression -> expression NOT_EQUALITY expression .)
    DO              reduce using rule 52 (expression -> expression NOT_EQUALITY expression .)
    TO              reduce using rule 52 (expression -> expression NOT_EQUALITY expression .)
    RBRACKET        reduce using rule 52 (expression -> expression NOT_EQUALITY expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46

  ! PLUS            [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! PERCENT         [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! FLOORDIV        [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! LESS_THAN       [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! GREATER_THAN    [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! LESS_EQUAL      [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! EQUALITY        [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]
  ! NOT_EQUALITY    [ reduce using rule 52 (expression -> expression NOT_EQUALITY expression .) ]


state 88

    (38) expr_list -> expression COMMA expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    COMMA           reduce using rule 38 (expr_list -> expression COMMA expression .)
    NEWLINE         reduce using rule 38 (expr_list -> expression COMMA expression .)
    $end            reduce using rule 38 (expr_list -> expression COMMA expression .)
    RPAREN          reduce using rule 38 (expr_list -> expression COMMA expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 89

    (39) expr_list -> expr_list COMMA expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    COMMA           reduce using rule 39 (expr_list -> expr_list COMMA expression .)
    NEWLINE         reduce using rule 39 (expr_list -> expr_list COMMA expression .)
    $end            reduce using rule 39 (expr_list -> expr_list COMMA expression .)
    RPAREN          reduce using rule 39 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 90

    (36) arg_list -> arg_list COMMA INT . VAR

    VAR             shift and go to state 105


state 91

    (37) arg_list -> arg_list COMMA DOUBLE . VAR

    VAR             shift and go to state 106


state 92

    (54) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    PERCENT         reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    FLOORDIV        reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    EQUALITY        reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    NOT_EQUALITY    reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 54 (expression -> LPAREN expression RPAREN .)


state 93

    (55) expression -> VAR LPAREN expression . RPAREN
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression
    (38) expr_list -> expression . COMMA expression

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46
    COMMA           shift and go to state 47


state 94

    (57) expression -> VAR LPAREN RPAREN .

    PLUS            reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    MINUS           reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    TIMES           reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    DIVIDE          reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    PERCENT         reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    FLOORDIV        reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    MOD             reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    LESS_THAN       reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    EQUALITY        reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    NOT_EQUALITY    reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    COMMA           reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    NEWLINE         reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    $end            reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    RPAREN          reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    THEN            reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    DO              reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    TO              reduce using rule 57 (expression -> VAR LPAREN RPAREN .)
    RBRACKET        reduce using rule 57 (expression -> VAR LPAREN RPAREN .)


state 95

    (56) expression -> VAR LPAREN expr_list . RPAREN
    (39) expr_list -> expr_list . COMMA expression

    RPAREN          shift and go to state 108
    COMMA           shift and go to state 48


state 96

    (23) assignment_stmt -> VAR EQUALS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    NEWLINE         reduce using rule 23 (assignment_stmt -> VAR EQUALS expression .)
    $end            reduce using rule 23 (assignment_stmt -> VAR EQUALS expression .)
    TO              reduce using rule 23 (assignment_stmt -> VAR EQUALS expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 97

    (59) array_index -> VAR LBRACKET expression . RBRACKET
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    RBRACKET        shift and go to state 109
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 98

    (24) assignment_stmt -> array_index EQUALS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    NEWLINE         reduce using rule 24 (assignment_stmt -> array_index EQUALS expression .)
    $end            reduce using rule 24 (assignment_stmt -> array_index EQUALS expression .)
    TO              reduce using rule 24 (assignment_stmt -> array_index EQUALS expression .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 99

    (29) function_header -> INT SUBROUTINE VAR . LPAREN arg_list RPAREN
    (31) function_header -> INT SUBROUTINE VAR . LPAREN RPAREN

    LPAREN          shift and go to state 110


state 100

    (30) function_header -> DOUBLE SUBROUTINE VAR . LPAREN arg_list RPAREN
    (32) function_header -> DOUBLE SUBROUTINE VAR . LPAREN RPAREN

    LPAREN          shift and go to state 111


state 101

    (4) if_stmt -> IF expression THEN . NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> IF expression THEN . NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> IF expression THEN . NEWLINE stmt_list NEWLINE ELSE if_stmt

    NEWLINE         shift and go to state 112


state 102

    (7) while_stmt -> WHILE expression DO . NEWLINE stmt_list NEWLINE ENDWHILE

    NEWLINE         shift and go to state 113


state 103

    (8) for_stmt -> FOR assignment_stmt TO . expression NEWLINE stmt_list NEWLINE NEXT VAR
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 51
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 114
    array_index                    shift and go to state 52
    literal                        shift and go to state 20

state 104

    (33) function_stmt -> function_header NEWLINE stmt_list . NEWLINE ENDSUBROUTINE
    (3) stmt_list -> stmt_list . NEWLINE simple_stmt

    NEWLINE         shift and go to state 115


state 105

    (36) arg_list -> arg_list COMMA INT VAR .

    COMMA           reduce using rule 36 (arg_list -> arg_list COMMA INT VAR .)
    NEWLINE         reduce using rule 36 (arg_list -> arg_list COMMA INT VAR .)
    $end            reduce using rule 36 (arg_list -> arg_list COMMA INT VAR .)
    RPAREN          reduce using rule 36 (arg_list -> arg_list COMMA INT VAR .)


state 106

    (37) arg_list -> arg_list COMMA DOUBLE VAR .

    COMMA           reduce using rule 37 (arg_list -> arg_list COMMA DOUBLE VAR .)
    NEWLINE         reduce using rule 37 (arg_list -> arg_list COMMA DOUBLE VAR .)
    $end            reduce using rule 37 (arg_list -> arg_list COMMA DOUBLE VAR .)
    RPAREN          reduce using rule 37 (arg_list -> arg_list COMMA DOUBLE VAR .)


state 107

    (55) expression -> VAR LPAREN expression RPAREN .

    PLUS            reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    MINUS           reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    TIMES           reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    PERCENT         reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    FLOORDIV        reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    MOD             reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    EQUALITY        reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    NOT_EQUALITY    reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    COMMA           reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    $end            reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    RPAREN          reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    THEN            reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    DO              reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    TO              reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 55 (expression -> VAR LPAREN expression RPAREN .)


state 108

    (56) expression -> VAR LPAREN expr_list RPAREN .

    PLUS            reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    TIMES           reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    DIVIDE          reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    PERCENT         reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    FLOORDIV        reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    MOD             reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    LESS_THAN       reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    GREATER_THAN    reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    LESS_EQUAL      reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    GREATER_EQUAL   reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    EQUALITY        reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    NOT_EQUALITY    reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    NEWLINE         reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    $end            reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    THEN            reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    DO              reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    TO              reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 56 (expression -> VAR LPAREN expr_list RPAREN .)


state 109

    (59) array_index -> VAR LBRACKET expression RBRACKET .

    EQUALS          reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    PERCENT         reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    FLOORDIV        reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    MOD             reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    LESS_THAN       reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    GREATER_THAN    reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    GREATER_EQUAL   reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    EQUALITY        reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    NOT_EQUALITY    reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    NEWLINE         reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    $end            reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    THEN            reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    DO              reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    TO              reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 59 (array_index -> VAR LBRACKET expression RBRACKET .)


state 110

    (29) function_header -> INT SUBROUTINE VAR LPAREN . arg_list RPAREN
    (31) function_header -> INT SUBROUTINE VAR LPAREN . RPAREN
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR

    RPAREN          shift and go to state 118
    INT             shift and go to state 116
    DOUBLE          shift and go to state 119

    arg_list                       shift and go to state 117

state 111

    (30) function_header -> DOUBLE SUBROUTINE VAR LPAREN . arg_list RPAREN
    (32) function_header -> DOUBLE SUBROUTINE VAR LPAREN . RPAREN
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR

    RPAREN          shift and go to state 121
    INT             shift and go to state 116
    DOUBLE          shift and go to state 119

    arg_list                       shift and go to state 120

state 112

    (4) if_stmt -> IF expression THEN NEWLINE . stmt_list NEWLINE ENDIF
    (5) if_stmt -> IF expression THEN NEWLINE . stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> IF expression THEN NEWLINE . stmt_list NEWLINE ELSE if_stmt
    (2) stmt_list -> . simple_stmt
    (3) stmt_list -> . stmt_list NEWLINE simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 4
    stmt_list                      shift and go to state 122
    if_stmt                        shift and go to state 9
    simple_stmt                    shift and go to state 3
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 113

    (7) while_stmt -> WHILE expression DO NEWLINE . stmt_list NEWLINE ENDWHILE
    (2) stmt_list -> . simple_stmt
    (3) stmt_list -> . stmt_list NEWLINE simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 4
    stmt_list                      shift and go to state 123
    simple_stmt                    shift and go to state 3
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 114

    (8) for_stmt -> FOR assignment_stmt TO expression . NEWLINE stmt_list NEWLINE NEXT VAR
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . PERCENT expression
    (45) expression -> expression . FLOORDIV expression
    (46) expression -> expression . MOD expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . GREATER_THAN expression
    (49) expression -> expression . LESS_EQUAL expression
    (50) expression -> expression . GREATER_EQUAL expression
    (51) expression -> expression . EQUALITY expression
    (52) expression -> expression . NOT_EQUALITY expression

    NEWLINE         shift and go to state 124
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    PERCENT         shift and go to state 38
    FLOORDIV        shift and go to state 39
    MOD             shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_EQUAL      shift and go to state 43
    GREATER_EQUAL   shift and go to state 44
    EQUALITY        shift and go to state 45
    NOT_EQUALITY    shift and go to state 46


state 115

    (33) function_stmt -> function_header NEWLINE stmt_list NEWLINE . ENDSUBROUTINE
    (3) stmt_list -> stmt_list NEWLINE . simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    ENDSUBROUTINE   shift and go to state 125
    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    function_header                shift and go to state 28
    simple_stmt                    shift and go to state 74
    expression                     shift and go to state 4
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20

state 116

    (34) arg_list -> INT . VAR

    VAR             shift and go to state 126


state 117

    (29) function_header -> INT SUBROUTINE VAR LPAREN arg_list . RPAREN
    (36) arg_list -> arg_list . COMMA INT VAR
    (37) arg_list -> arg_list . COMMA DOUBLE VAR

    RPAREN          shift and go to state 127
    COMMA           shift and go to state 49


state 118

    (31) function_header -> INT SUBROUTINE VAR LPAREN RPAREN .

    NEWLINE         reduce using rule 31 (function_header -> INT SUBROUTINE VAR LPAREN RPAREN .)


state 119

    (35) arg_list -> DOUBLE . VAR

    VAR             shift and go to state 128


state 120

    (30) function_header -> DOUBLE SUBROUTINE VAR LPAREN arg_list . RPAREN
    (36) arg_list -> arg_list . COMMA INT VAR
    (37) arg_list -> arg_list . COMMA DOUBLE VAR

    RPAREN          shift and go to state 129
    COMMA           shift and go to state 49


state 121

    (32) function_header -> DOUBLE SUBROUTINE VAR LPAREN RPAREN .

    NEWLINE         reduce using rule 32 (function_header -> DOUBLE SUBROUTINE VAR LPAREN RPAREN .)


state 122

    (4) if_stmt -> IF expression THEN NEWLINE stmt_list . NEWLINE ENDIF
    (5) if_stmt -> IF expression THEN NEWLINE stmt_list . NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> IF expression THEN NEWLINE stmt_list . NEWLINE ELSE if_stmt
    (3) stmt_list -> stmt_list . NEWLINE simple_stmt

    NEWLINE         shift and go to state 130


state 123

    (7) while_stmt -> WHILE expression DO NEWLINE stmt_list . NEWLINE ENDWHILE
    (3) stmt_list -> stmt_list . NEWLINE simple_stmt

    NEWLINE         shift and go to state 131


state 124

    (8) for_stmt -> FOR assignment_stmt TO expression NEWLINE . stmt_list NEWLINE NEXT VAR
    (2) stmt_list -> . simple_stmt
    (3) stmt_list -> . stmt_list NEWLINE simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    assignment_stmt                shift and go to state 7
    expression                     shift and go to state 4
    stmt_list                      shift and go to state 132
    simple_stmt                    shift and go to state 3
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 125

    (33) function_stmt -> function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE .

    NEWLINE         reduce using rule 33 (function_stmt -> function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE .)
    $end            reduce using rule 33 (function_stmt -> function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE .)


state 126

    (34) arg_list -> INT VAR .

    RPAREN          reduce using rule 34 (arg_list -> INT VAR .)
    COMMA           reduce using rule 34 (arg_list -> INT VAR .)


state 127

    (29) function_header -> INT SUBROUTINE VAR LPAREN arg_list RPAREN .

    NEWLINE         reduce using rule 29 (function_header -> INT SUBROUTINE VAR LPAREN arg_list RPAREN .)


state 128

    (35) arg_list -> DOUBLE VAR .

    RPAREN          reduce using rule 35 (arg_list -> DOUBLE VAR .)
    COMMA           reduce using rule 35 (arg_list -> DOUBLE VAR .)


state 129

    (30) function_header -> DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN .

    NEWLINE         reduce using rule 30 (function_header -> DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN .)


state 130

    (4) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE . ENDIF
    (5) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE . ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE . ELSE if_stmt
    (3) stmt_list -> stmt_list NEWLINE . simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    ENDIF           shift and go to state 133
    ELSE            shift and go to state 134
    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 4
    if_stmt                        shift and go to state 9
    simple_stmt                    shift and go to state 74
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 131

    (7) while_stmt -> WHILE expression DO NEWLINE stmt_list NEWLINE . ENDWHILE
    (3) stmt_list -> stmt_list NEWLINE . simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    ENDWHILE        shift and go to state 135
    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 4
    simple_stmt                    shift and go to state 74
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 132

    (8) for_stmt -> FOR assignment_stmt TO expression NEWLINE stmt_list . NEWLINE NEXT VAR
    (3) stmt_list -> stmt_list . NEWLINE simple_stmt

    NEWLINE         shift and go to state 136


state 133

    (4) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ENDIF .

    NEWLINE         reduce using rule 4 (if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ENDIF .)
    $end            reduce using rule 4 (if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ENDIF .)


state 134

    (5) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE . NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE . if_stmt
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt

    NEWLINE         shift and go to state 137
    IF              shift and go to state 23

    if_stmt                        shift and go to state 138

state 135

    (7) while_stmt -> WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE .

    NEWLINE         reduce using rule 7 (while_stmt -> WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE .)
    $end            reduce using rule 7 (while_stmt -> WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE .)


state 136

    (8) for_stmt -> FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE . NEXT VAR
    (3) stmt_list -> stmt_list NEWLINE . simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    NEXT            shift and go to state 139
    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    assignment_stmt                shift and go to state 7
    expression                     shift and go to state 4
    simple_stmt                    shift and go to state 74
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 137

    (5) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE . stmt_list NEWLINE ENDIF
    (2) stmt_list -> . simple_stmt
    (3) stmt_list -> . stmt_list NEWLINE simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 4
    stmt_list                      shift and go to state 140
    simple_stmt                    shift and go to state 3
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 138

    (6) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt .

    NEWLINE         reduce using rule 6 (if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt .)
    $end            reduce using rule 6 (if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt .)


state 139

    (8) for_stmt -> FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT . VAR

    VAR             shift and go to state 141


state 140

    (5) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list . NEWLINE ENDIF
    (3) stmt_list -> stmt_list . NEWLINE simple_stmt

    NEWLINE         shift and go to state 142


state 141

    (8) for_stmt -> FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR .

    NEWLINE         reduce using rule 8 (for_stmt -> FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR .)
    $end            reduce using rule 8 (for_stmt -> FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR .)


state 142

    (5) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE . ENDIF
    (3) stmt_list -> stmt_list NEWLINE . simple_stmt
    (9) simple_stmt -> . expression
    (10) simple_stmt -> . expr_list
    (11) simple_stmt -> . arg_list
    (12) simple_stmt -> . assignment_stmt
    (13) simple_stmt -> . array_decl_stmt
    (14) simple_stmt -> . if_stmt
    (15) simple_stmt -> . while_stmt
    (16) simple_stmt -> . for_stmt
    (17) simple_stmt -> . output_stmt
    (18) simple_stmt -> . input_stmt
    (19) simple_stmt -> . function_stmt
    (20) simple_stmt -> . return_stmt
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression PERCENT expression
    (45) expression -> . expression FLOORDIV expression
    (46) expression -> . expression MOD expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression GREATER_THAN expression
    (49) expression -> . expression LESS_EQUAL expression
    (50) expression -> . expression GREATER_EQUAL expression
    (51) expression -> . expression EQUALITY expression
    (52) expression -> . expression NOT_EQUALITY expression
    (53) expression -> . MINUS expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . VAR LPAREN expression RPAREN
    (56) expression -> . VAR LPAREN expr_list RPAREN
    (57) expression -> . VAR LPAREN RPAREN
    (58) expression -> . array_index
    (60) expression -> . literal
    (64) expression -> . VAR
    (38) expr_list -> . expression COMMA expression
    (39) expr_list -> . expr_list COMMA expression
    (34) arg_list -> . INT VAR
    (35) arg_list -> . DOUBLE VAR
    (36) arg_list -> . arg_list COMMA INT VAR
    (37) arg_list -> . arg_list COMMA DOUBLE VAR
    (23) assignment_stmt -> . VAR EQUALS expression
    (24) assignment_stmt -> . array_index EQUALS expression
    (21) array_decl_stmt -> . DOUBLE array_index
    (22) array_decl_stmt -> . INT array_index
    (4) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ENDIF
    (5) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF
    (6) if_stmt -> . IF expression THEN NEWLINE stmt_list NEWLINE ELSE if_stmt
    (7) while_stmt -> . WHILE expression DO NEWLINE stmt_list NEWLINE ENDWHILE
    (8) for_stmt -> . FOR assignment_stmt TO expression NEWLINE stmt_list NEWLINE NEXT VAR
    (27) output_stmt -> . OUTPUT expression
    (25) input_stmt -> . INPUT VAR
    (26) input_stmt -> . INPUT array_index
    (33) function_stmt -> . function_header NEWLINE stmt_list NEWLINE ENDSUBROUTINE
    (28) return_stmt -> . RETURN expression
    (59) array_index -> . VAR LBRACKET expression RBRACKET
    (61) literal -> . INT_CONST
    (62) literal -> . DOUBLE_CONST
    (63) literal -> . STRING_CONST
    (29) function_header -> . INT SUBROUTINE VAR LPAREN arg_list RPAREN
    (30) function_header -> . DOUBLE SUBROUTINE VAR LPAREN arg_list RPAREN
    (31) function_header -> . INT SUBROUTINE VAR LPAREN RPAREN
    (32) function_header -> . DOUBLE SUBROUTINE VAR LPAREN RPAREN

    ENDIF           shift and go to state 143
    MINUS           shift and go to state 16
    LPAREN          shift and go to state 17
    VAR             shift and go to state 18
    INT             shift and go to state 21
    DOUBLE          shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    OUTPUT          shift and go to state 26
    INPUT           shift and go to state 27
    RETURN          shift and go to state 29
    INT_CONST       shift and go to state 30
    DOUBLE_CONST    shift and go to state 31
    STRING_CONST    shift and go to state 32

    expression                     shift and go to state 4
    simple_stmt                    shift and go to state 74
    expr_list                      shift and go to state 5
    arg_list                       shift and go to state 6
    assignment_stmt                shift and go to state 7
    array_decl_stmt                shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    for_stmt                       shift and go to state 11
    output_stmt                    shift and go to state 12
    input_stmt                     shift and go to state 13
    function_stmt                  shift and go to state 14
    return_stmt                    shift and go to state 15
    array_index                    shift and go to state 19
    literal                        shift and go to state 20
    function_header                shift and go to state 28

state 143

    (5) if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF .

    NEWLINE         reduce using rule 5 (if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF .)
    $end            reduce using rule 5 (if_stmt -> IF expression THEN NEWLINE stmt_list NEWLINE ELSE NEWLINE stmt_list NEWLINE ENDIF .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 80 resolved as shift
WARNING: shift/reduce conflict for FLOORDIV in state 80 resolved as shift
WARNING: shift/reduce conflict for MOD in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 80 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALITY in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 81 resolved as shift
WARNING: shift/reduce conflict for FLOORDIV in state 81 resolved as shift
WARNING: shift/reduce conflict for MOD in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 81 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALITY in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 82 resolved as shift
WARNING: shift/reduce conflict for FLOORDIV in state 82 resolved as shift
WARNING: shift/reduce conflict for MOD in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 82 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALITY in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 83 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 83 resolved as shift
WARNING: shift/reduce conflict for FLOORDIV in state 83 resolved as shift
WARNING: shift/reduce conflict for MOD in state 83 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 83 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 83 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALITY in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOORDIV in state 84 resolved as shift
WARNING: shift/reduce conflict for MOD in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 84 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALITY in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 85 resolved as shift
WARNING: shift/reduce conflict for FLOORDIV in state 85 resolved as shift
WARNING: shift/reduce conflict for MOD in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALITY in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 86 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 86 resolved as shift
WARNING: shift/reduce conflict for FLOORDIV in state 86 resolved as shift
WARNING: shift/reduce conflict for MOD in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALITY in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 87 resolved as shift
WARNING: shift/reduce conflict for FLOORDIV in state 87 resolved as shift
WARNING: shift/reduce conflict for MOD in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 87 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALITY in state 87 resolved as shift
